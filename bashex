#!/bin/bash

function bashex() {
    if [ -z "${1}" ]; then
        echo "Usage: ${0} [FILES ...]"
        return 1
    fi

    PROCESSING_FILES=()
    BASHMACRO_RC="./.macrorc"

    while [ "${#}" -gt 0 ]; do
        case "${1}" in
            --rcfile=*)
                BASHMACRO_RC="${1#*=}"
                shift
                ;;
            --rcfile)
                BASHMACRO_RC="${2}"
                shift 2
                ;;
            --)
                PROCESSING_FILES+=("${@:2}")
                break
                ;;
        
            *)
                PROCESSING_FILES+=("${1}")
                shift
                ;;
        esac
    done

    function setup_stdout() {
        local copy_fd="${1}"

        # Create a copy of stdout
        exec {_STDOUT_COPY}>&1

        echo "${copy_fd}"
        # setup interceptor (stdout is now a pipe to tee that writes to the respective pipes)
        exec 1> >(tee "/dev/fd/${_STDOUT_COPY}" >&"${copy_fd}")
        return 0
    }

    function restore_stdout() {
        if [ -z "${_STDOUT_COPY}" ]; then
            echo "cannot restore stdout as no copy is identifiable" >&2
            return 1
        fi

        exec 1>&-
        exec >&"${_STDOUT_COPY}"-

        unset _STDOUT_COPY
    }

    local tmp_fifo
    tmp_fifo="$(mktemp --tmpdir "${0##*/}${$}XXXXXXXXXX")"
    trap -- "rm -f ${tmp_fifo}" EXIT RETURN INT HUP TERM

    rm -f "${tmp_fifo}" && mkfifo "${tmp_fifo}" && echo "success" >&2

    local line_in_fd=3
    local line_out_fd=4
   
    # Avoid a deadlock by starting this in the background (apparently this works?)
    #local bg_pid="${!}"
    
    # TODO: Fuck this just use a named fifo and deal with it
    exec {line_in_fd}< <(cat "${tmp_fifo}")
    sleep 0.1
    exec {line_out_fd}> "${tmp_fifo}"
    
    rm -f "${tmp_fifo}"

    setup_stdout "${line_out_fd}"

    function evaluate() {
        (eval "${*}")
    }
    function evaluate_inline() {
        (
            shopt -s expand_aliases
            alias echo='echo -En '
            eval "${*}"
        )
    }
    function process_file() {
        shopt -sq extglob
        local line
        local line_part
        # Line commands trail the line and are denoted with #$
        local line_command
        # Inline command is a command which outputs as part of the middle of a raw line
        local inline_command

        # todo: '#$' execute command with stdin being the line preceeding the command
        # todo: '#$-' no further commands may follow, ends a multiline capture
        # todo: '#$rep [n]'
        # todo: '#$while [ cond ]; <commands>'
        # todo: '#$if cond', '#$elif cond', '#$else'
        while IFS= read -r line || [ -n "${line_command}" ]; do
            # todo: if line is a special line command evaluate the existing line if it exists, then run it
            if [[ "${line}" == '#$'* ]]; then
                line_command+="${line#'#$'}"$'\n'
                continue
            # if line command is set but the line does not start with a command marker
            elif [ -n "${line_command}" ]; then
                evaluate ${line_command}
                line_command=
            fi
            
            # Empty line in of previous line in case unused (no line command or line command didn't use stdin)
            cat <&"${line_in_fd}" >/dev/null
        
            if [[ "${line}" == *'#$'* ]]; then
                line_command="${line#*'#$'}"$'\n'
                line="${line%'#$'*}"
            fi
       
            # iterate the line and process inline commands
            while [ -n "${line}" ]; do
                line_part="${line%%?(?)'${{'*'}}'*}"
                echo "raw capture: '${line_part}'" >&2
                if [ -n "${line_part}" ]; then
                    # Advance the line by content grabbed
                    line="${line#"${line_part}"}"
                    echo -n -E "${line_part}"
                    line_part=
                fi

                # TODO: multiline inlines
                # TODO: if whole inline is a variable expansion, support implicit variable expansion
                line_part="${line%"${line#?(?)'${{'*'}}'}"}"
                if [ -n "${line_part}" ]; then
                    if [[ "${line_part}" == '\$'* ]]; then
                        echo "escaped inline capture: ${line_part}" >&2
                        echo -n -E "${line_part}"
                    else
                        echo "inline capture: '${line_part}'" >&2
                        echo -n "${line_part:0:1}"
                        inline_command="${line_part#*'${{'}"
                        inline_command="${inline_command%'}}'}"
                        if [ -n "${inline_command}" ]; then
                            evaluate_inline "${inline_command}"
                        fi
                        inline_command=
                    fi
                    line="${line#"${line_part}"}"
                    line_part=
                fi
            done

            [ -z "${line_command}" ] && echo;

        done < "${FILE}"

    }

    for FILE in "${PROCESSING_FILES[@]}"; do
        if [ "${FILE}" = '-' ]; then
            FILE="/dev/stdin"
        elif [ ! -f "${FILE}" ]; then
            echo "'${FILE}' not found" >&2
            continue
        fi
    
        process_file "${FILE}"
    done

    unset -f process_file
    restore_stdout
}

[[ "${-}" == *i* ]] || bashex "${@}"
