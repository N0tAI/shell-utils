#!/bin/bash

function mbash() {
    if [ -z "${1}" ]; then
        echo "Usage: ${0} [FILES ...]"
        return 1
    fi

    PROCESSING_FILES=()
    BASHMACRO_RC="./.macrorc"

    while [ "${#}" -gt 0 ]; do
        case "${1}" in
            --rcfile=*)
                BASHMACRO_RC="${1#*=}"
                shift
                ;;
            --rcfile)
                BASHMACRO_RC="${2}"
                shift 2
                ;;
            --)
                PROCESSING_FILES+=("${@:2}")
                break
                ;;
        
            *)
                PROCESSING_FILES+=("${1}")
                shift
                ;;
        esac
    done
    
    function evaluate() {
        eval "${*}"
    }
    function process_file() {
        shopt -sq extglob
        local line
        local line_part
        # Line commands trail the line and are denoted with #$
        local line_command
        # Inline command is a command which outputs as part of the middle of a raw line
        local inline_command

        # todo: '#$|' execute command with stdin being the line preceeding the command
        # todo: '#$[n]>' execute command with fd n being stdin
        # todo: '#$[n]<' if there are commands following the commands are executed with stdout being fd n, if no commands start a multiline capture and pipe capture to fd n
        # todo: '#$-' no further commands may follow, ends a multiline capture
        # todo: '#$rep [n]'
        # todo: '#$while [ cond ]; <commands>'
        # todo: '#$if cond', '#$elif cond', '#$else'
        while IFS= read -r line || [ -n "${line_command}" ]; do
            # todo: if line is a special line command evaluate the existing line if it exists, then run it
            if [[ "${line}" == '#$'* ]]; then
                line_command+="${line#'#$'}"$'\n'
                continue
            # if line command is set but the line does not start with a command marker
            elif [ -n "${line_command}" ]; then
                (eval "${line_command}")
                line_command=
            fi
        
            if [[ "${line}" == *'#$'* ]]; then
                line_command="${line#*'#$'}"$'\n'
                line="${line%'#$'*}"
            fi
       
            # iterate the line and process inline commands
            while [ -n "${line}" ]; do
                line_part="${line%%?(?)'${{'*'}}'*}"
                echo "raw capture: '${line_part}'" >&2
                if [ -n "${line_part}" ]; then
                    # Advance the line by content grabbed
                    line="${line#"${line_part}"}"
                    echo -n -E "${line_part}"
                    line_part=
                fi

                # TODO: multiline inlines
                # TODO: if whole inline is a variable expansion, support implicit variable expansion
                line_part="${line%"${line#?(?)'${{'*'}}'}"}"
                if [ -n "${line_part}" ]; then
                    if [[ "${line_part}" == '\$'* ]]; then
                        echo "escaped inline capture: ${line_part}" >&2
                        echo -n -E "${line_part}"
                    else
                        echo "inline capture: '${line_part}'" >&2
                        echo -n "${line_part:0:1}"
                        inline_command="${line_part#*'${{'}"
                        inline_command="${inline_command%'}}'}"
                        if [ -n "${inline_command}" ]; then
                            (
                                shopt -s expand_aliases
                                alias echo='echo -En ';
                                evaluate "${inline_command}"
                            )
                        fi
                        inline_command=
                    fi
                    line="${line#"${line_part}"}"
                    line_part=
                fi
            done

            [ -z "${line_command}" ] && echo

        done < "${FILE}"

    }

    for FILE in "${PROCESSING_FILES[@]}"; do
        if [ "${FILE}" = '-' ]; then
            FILE="/dev/stdin"
        elif [ ! -f "${FILE}" ]; then
            echo "'${FILE}' not found" >&2
            continue
        fi
    
        process_file "${FILE}"
    done

    unset -f process_file
}

[[ "$-" != *i* ]] && mbash "${@}"
